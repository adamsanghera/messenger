// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conversation.proto

/*
Package conversation is a generated protocol buffer package.

It is generated from these files:
	conversation.proto

It has these top-level messages:
	Empty
	CID
	CIDs
	UID
	UIDs
	Message
	ConvView
	ConvViewsList
*/
package conversation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CID struct {
	CID int32 `protobuf:"varint,1,opt,name=CID" json:"CID,omitempty"`
}

func (m *CID) Reset()                    { *m = CID{} }
func (m *CID) String() string            { return proto.CompactTextString(m) }
func (*CID) ProtoMessage()               {}
func (*CID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CID) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

type CIDs struct {
	CIDs []*CID `protobuf:"bytes,1,rep,name=CIDs" json:"CIDs,omitempty"`
}

func (m *CIDs) Reset()                    { *m = CIDs{} }
func (m *CIDs) String() string            { return proto.CompactTextString(m) }
func (*CIDs) ProtoMessage()               {}
func (*CIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CIDs) GetCIDs() []*CID {
	if m != nil {
		return m.CIDs
	}
	return nil
}

type UID struct {
	UID int32 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *UID) Reset()                    { *m = UID{} }
func (m *UID) String() string            { return proto.CompactTextString(m) }
func (*UID) ProtoMessage()               {}
func (*UID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UID) GetUID() int32 {
	if m != nil {
		return m.UID
	}
	return 0
}

type UIDs struct {
	UIDs []*UID `protobuf:"bytes,1,rep,name=UIDs" json:"UIDs,omitempty"`
}

func (m *UIDs) Reset()                    { *m = UIDs{} }
func (m *UIDs) String() string            { return proto.CompactTextString(m) }
func (*UIDs) ProtoMessage()               {}
func (*UIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UIDs) GetUIDs() []*UID {
	if m != nil {
		return m.UIDs
	}
	return nil
}

type Message struct {
	Author    string `protobuf:"bytes,1,opt,name=Author" json:"Author,omitempty"`
	AuthorID  *UID   `protobuf:"bytes,2,opt,name=AuthorID" json:"AuthorID,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Message) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Message) GetAuthorID() *UID {
	if m != nil {
		return m.AuthorID
	}
	return nil
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ConvView struct {
	Content   string `protobuf:"bytes,1,opt,name=Content" json:"Content,omitempty"`
	Author    string `protobuf:"bytes,2,opt,name=Author" json:"Author,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	CID       int32  `protobuf:"varint,4,opt,name=CID" json:"CID,omitempty"`
}

func (m *ConvView) Reset()                    { *m = ConvView{} }
func (m *ConvView) String() string            { return proto.CompactTextString(m) }
func (*ConvView) ProtoMessage()               {}
func (*ConvView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ConvView) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ConvView) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ConvView) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ConvView) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

type ConvViewsList struct {
	Conversations []*ConvView `protobuf:"bytes,1,rep,name=Conversations" json:"Conversations,omitempty"`
}

func (m *ConvViewsList) Reset()                    { *m = ConvViewsList{} }
func (m *ConvViewsList) String() string            { return proto.CompactTextString(m) }
func (*ConvViewsList) ProtoMessage()               {}
func (*ConvViewsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ConvViewsList) GetConversations() []*ConvView {
	if m != nil {
		return m.Conversations
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*CID)(nil), "CID")
	proto.RegisterType((*CIDs)(nil), "CIDs")
	proto.RegisterType((*UID)(nil), "UID")
	proto.RegisterType((*UIDs)(nil), "UIDs")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*ConvView)(nil), "ConvView")
	proto.RegisterType((*ConvViewsList)(nil), "ConvViewsList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConversationManager service

type ConversationManagerClient interface {
	SortCIDs(ctx context.Context, in *CIDs, opts ...grpc.CallOption) (*ConvViewsList, error)
	NewConversation(ctx context.Context, in *UIDs, opts ...grpc.CallOption) (*Empty, error)
	NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	DeleteConversation(ctx context.Context, in *CID, opts ...grpc.CallOption) (*Empty, error)
	DeleteHistoryOf(ctx context.Context, in *UID, opts ...grpc.CallOption) (*Empty, error)
}

type conversationManagerClient struct {
	cc *grpc.ClientConn
}

func NewConversationManagerClient(cc *grpc.ClientConn) ConversationManagerClient {
	return &conversationManagerClient{cc}
}

func (c *conversationManagerClient) SortCIDs(ctx context.Context, in *CIDs, opts ...grpc.CallOption) (*ConvViewsList, error) {
	out := new(ConvViewsList)
	err := grpc.Invoke(ctx, "/ConversationManager/sortCIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationManagerClient) NewConversation(ctx context.Context, in *UIDs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ConversationManager/newConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationManagerClient) NewMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ConversationManager/newMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationManagerClient) DeleteConversation(ctx context.Context, in *CID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ConversationManager/deleteConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationManagerClient) DeleteHistoryOf(ctx context.Context, in *UID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ConversationManager/deleteHistoryOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConversationManager service

type ConversationManagerServer interface {
	SortCIDs(context.Context, *CIDs) (*ConvViewsList, error)
	NewConversation(context.Context, *UIDs) (*Empty, error)
	NewMessage(context.Context, *Message) (*Empty, error)
	DeleteConversation(context.Context, *CID) (*Empty, error)
	DeleteHistoryOf(context.Context, *UID) (*Empty, error)
}

func RegisterConversationManagerServer(s *grpc.Server, srv ConversationManagerServer) {
	s.RegisterService(&_ConversationManager_serviceDesc, srv)
}

func _ConversationManager_SortCIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationManagerServer).SortCIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConversationManager/SortCIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationManagerServer).SortCIDs(ctx, req.(*CIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationManager_NewConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationManagerServer).NewConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConversationManager/NewConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationManagerServer).NewConversation(ctx, req.(*UIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationManager_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationManagerServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConversationManager/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationManagerServer).NewMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationManager_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationManagerServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConversationManager/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationManagerServer).DeleteConversation(ctx, req.(*CID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationManager_DeleteHistoryOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationManagerServer).DeleteHistoryOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConversationManager/DeleteHistoryOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationManagerServer).DeleteHistoryOf(ctx, req.(*UID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ConversationManager",
	HandlerType: (*ConversationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sortCIDs",
			Handler:    _ConversationManager_SortCIDs_Handler,
		},
		{
			MethodName: "newConversation",
			Handler:    _ConversationManager_NewConversation_Handler,
		},
		{
			MethodName: "newMessage",
			Handler:    _ConversationManager_NewMessage_Handler,
		},
		{
			MethodName: "deleteConversation",
			Handler:    _ConversationManager_DeleteConversation_Handler,
		},
		{
			MethodName: "deleteHistoryOf",
			Handler:    _ConversationManager_DeleteHistoryOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conversation.proto",
}

func init() { proto.RegisterFile("conversation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0xc9, 0xda, 0x6e, 0xdd, 0x79, 0x79, 0x9d, 0x1c, 0x41, 0xc3, 0x10, 0x8d, 0xbd, 0xda,
	0x55, 0x85, 0xf9, 0x05, 0x94, 0x56, 0xb0, 0xe0, 0x10, 0x8a, 0xf5, 0xbe, 0x6a, 0x9c, 0x85, 0x2d,
	0x19, 0x4d, 0xdc, 0x18, 0x7e, 0x38, 0xbf, 0x9a, 0x34, 0x5d, 0xfa, 0xc7, 0xab, 0x9c, 0x3c, 0x39,
	0xbf, 0x27, 0xe1, 0x3c, 0x01, 0x7c, 0x93, 0x62, 0xcb, 0x4b, 0x95, 0xeb, 0x42, 0x8a, 0x70, 0x53,
	0x4a, 0x2d, 0x83, 0x11, 0x78, 0xf7, 0xeb, 0x8d, 0xde, 0x07, 0x67, 0xe0, 0x44, 0x49, 0x8c, 0xc7,
	0x66, 0xa1, 0x84, 0x91, 0x99, 0x97, 0x56, 0x65, 0xc0, 0xc0, 0x8d, 0x92, 0x58, 0x21, 0xad, 0x57,
	0x4a, 0x98, 0x33, 0xfb, 0x37, 0x77, 0xc3, 0x28, 0x89, 0x53, 0xa3, 0x54, 0x68, 0x56, 0xa3, 0x59,
	0x8b, 0x66, 0x35, 0x9a, 0x1d, 0xd0, 0xac, 0x8b, 0x66, 0x15, 0x5a, 0x29, 0xc1, 0x37, 0x8c, 0x16,
	0x5c, 0xa9, 0x7c, 0xc9, 0xf1, 0x14, 0x86, 0x77, 0x5f, 0xfa, 0x53, 0x96, 0xc6, 0x61, 0x9c, 0x1e,
	0x76, 0xc8, 0xc0, 0xaf, 0xab, 0x24, 0xa6, 0x03, 0x46, 0x1a, 0x83, 0x46, 0x45, 0x0a, 0xa3, 0x48,
	0x0a, 0xcd, 0x85, 0xa6, 0x8e, 0x41, 0xed, 0x16, 0xcf, 0x61, 0xfc, 0x5c, 0xac, 0xb9, 0xd2, 0xf9,
	0x7a, 0x43, 0x5d, 0x46, 0x66, 0x4e, 0xda, 0x0a, 0xc1, 0x0a, 0xfc, 0x48, 0x8a, 0xed, 0x4b, 0xc1,
	0x77, 0x5d, 0x0f, 0xd2, 0xf7, 0x68, 0xdf, 0x35, 0xe8, 0xbd, 0xab, 0xe7, 0xed, 0xfc, 0xf1, 0xb6,
	0x73, 0x74, 0xdb, 0x39, 0xde, 0xc2, 0x7f, 0x7b, 0x9b, 0x7a, 0x2c, 0x94, 0xc6, 0xeb, 0x5a, 0xb0,
	0x81, 0xd8, 0xf1, 0x8c, 0x43, 0xdb, 0x96, 0xf6, 0xcf, 0xe7, 0x3f, 0x04, 0x4e, 0xba, 0xca, 0x22,
	0x17, 0xf9, 0x92, 0x97, 0x78, 0x05, 0xbe, 0x92, 0xa5, 0x36, 0x29, 0x79, 0x55, 0x2e, 0x6a, 0x7a,
	0x14, 0xf6, 0xef, 0x62, 0x30, 0x11, 0x7c, 0xd7, 0x85, 0xd1, 0xab, 0xa6, 0xa8, 0xa6, 0xc3, 0xd0,
	0xe4, 0x8f, 0x17, 0x00, 0x82, 0xef, 0x6c, 0x18, 0x7e, 0x78, 0xa8, 0x9a, 0xf3, 0x00, 0xf0, 0x9d,
	0xaf, 0xb8, 0xe6, 0x3d, 0x13, 0xf3, 0x0d, 0x9a, 0x9e, 0x4b, 0x98, 0xd4, 0x3d, 0x0f, 0x85, 0xd2,
	0xb2, 0xdc, 0x3f, 0x7d, 0xa0, 0xc9, 0xca, 0x36, 0xbc, 0x0e, 0xcd, 0xa7, 0xbb, 0xf9, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x76, 0xdc, 0x4b, 0x8a, 0x02, 0x00, 0x00,
}
